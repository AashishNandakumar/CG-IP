/*
 * program 4: Demonstrate 2D transformations on basic objects (using builtin functions)
 */

#include <GL/glut.h>
#include <cstdlib>

float tx = 0, ty = 0;
float angle = 0;
float scale = 1;

void init() {
    glClearColor(0, 0, 0, 1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-10, 10, -10, 10);

    glMatrixMode(GL_MODELVIEW);
}

// to maintain the aspect ratio
void reshape(int w, int h) {
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    if (w > h) {
        gluOrtho2D(-10 * w / h, 10 * w / h, -10, 10);
    } else {
        gluOrtho2D(-10, 10, -10 * w / h, 10 * w / h);
    }

    glMatrixMode(GL_MODELVIEW);

    glutPostRedisplay();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glLoadIdentity();

    glTranslatef(tx, ty, 0);
    glScalef(scale, scale, 1);
    glRotatef(angle, 0, 0, 1);

    glBegin(GL_TRIANGLES);
    glColor3f(1, 0, 0);
    glVertex2i(-5, -5);

    glColor3f(0, 1, 0);
    glVertex2i(5, -5);

    glColor3f(0, 0, 1);
    glVertex2i(0, 5);

    glEnd();
    glFlush();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'w':
            ty += 1;
            break;
        case 'a':
            tx -= 1;
            break;
        case 's':
            ty -= 1;
            break;
        case 'd':
            tx += 1;
            break;
        case '+':
            scale += 0.1;
            if (scale > 5) scale = 5;
            reshape(glutGet(GLUT_WINDOW_WIDTH), glutGet(GLUT_WINDOW_HEIGHT));
            break;
        case '-':
            scale -= 0.1;
            if (scale < 0.1) scale = 0.1;
            reshape(glutGet(GLUT_WINDOW_WIDTH), glutGet(GLUT_WINDOW_HEIGHT));
            break;
        case 'r':
            angle -= 5.0;
            break;
        case 'l':
            angle += 5.0;
            break;
        case 27:
            exit(0);
    }

    glutPostRedisplay();
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    glutInitWindowPosition(400, 200);
    glutCreateWindow("2D geometric operations on a 2D object with built-in functions");

    init();

    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);

    glutMainLoop();

    return 0;
}