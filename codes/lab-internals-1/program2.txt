/*
 * Demonstrate basic geometric operations on a 2D object
 */

#include <GL/glut.h>
#include <iostream>
#include <cstdlib>
#include <cmath>

using namespace std;

float tx = 0, ty = 0; // translation
float sx = 1, sy = 1;  // scaling
float angle = 0;  // rotation

float vertices[][2] = {
        {-5, 0},
        {5, 0},
        {0, 8}
};

void init() {
    glClearColor(0, 0, 0, 0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-10, 10, -10, 10);
    glMatrixMode(GL_MODELVIEW);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1, 1, 1);

    glBegin(GL_TRIANGLES);
    for (int i = 0; i < 3; i++) {
        float x = vertices[i][0];
        float y = vertices[i][1];

        // scaling
        x *= sx;
        y *= sy;

        // rotation
        float rad = angle * (3.14 / 180);
        float x_rot = x * cos(rad) - y * sin(rad);
        float y_rot = x * sin(rad) + y * cos(rad);

        x = x_rot;
        y = y_rot;

        // translation
        x += tx;
        y += ty;

        glVertex2f(x, y);
    }

    glEnd();
    glFlush();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'w':
            ty += 1;
            break;
        case 'a':
            tx -= 1;
            break;
        case 's':
            ty -= 1;
            break;
        case 'd':
            tx += 1;
            break;
        case '+':
            sx += 0.1;
            sy += 0.1;
            if (sx > 2.0) sx = 2.0;
            if (sy > 2.0) sy = 2.0;
            break;
        case '-':
            sx -= 0.1;
            sy -= 0.1;
            if (sx < 0.1) sx = 0.1;
            if (sx < 0.1) sy = 0.1;
            break;
        case 'r':
            angle -= 5.0;
            break;
        case 'l':
            angle += 5.0;
            break;
        case 27:
            exit(0);
    }

    glutPostRedisplay();
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    glutInitWindowPosition(400, 200);
    glutCreateWindow("Geometric operations on a 2D object");

    init();

    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);

    glutMainLoop();

    return 0;
}