#include <GL/glut.h>
#include <cmath>
#include <cstdlib>
#include <iostream>

using namespace std;

// NOTE: This program is to demonstrate 2D geometric operations

// initial triangle vertices
float vertices[3][2] = {
        {0.0,  0.5},
        {-0.5, -0.5},
        {0.5,  -0.5},
};

// transformation parameters
float tx = 0.0, ty = 0.0; // translating
float angle = 0.0; // rotating
float sx = 1.0, sy = 1.0; // scaling

void display() {
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_TRIANGLES);
    // perform transformations manually
    for (int i = 0; i < 3; i++) {
        float x = vertices[i][0];
        float y = vertices[i][1];

        // scaling
        x *= sx;
        y *= sy;

        // rotation
        float rad = angle * (3.14f / 180);
        float x_rot = x * cos(rad) - y * sin(rad);
        float y_rot = x * sin(rad) + y * cos(rad);
        x = x_rot;
        y = y_rot;

        // translation
        x += tx;
        y += ty;

        glVertex2f(x, y);
    }
    glEnd();

    glFlush();
}

void keyboard(unsigned char key, int x, int y) {
    switch (key) {
        case 'w':
            ty += 1;
            break; // move up
        case 'a':
            tx -= 1;
            break; // move left
        case 's':
            ty -= 1;
            break; // move down
        case 'd':
            tx += 1;
            break; // move right
        case '+':
            sx += 0.1;
            sy += 0.1;
            // prevent excessive scaling
            if (sx > 2.0) sx = 2.0;
            if (sy > 2.0) sy = 2.0;
            break;
        case '-':
            sx -= 0.1;
            sy -= 0.1;
            // prevent excessive scaling
            if (sx < 0.1) sx = 0.1;
            if (sy < 0.1) sy = 0.1;
            break;
        case 'r':
            angle += 5.0;
            break;
        case 'l':
            angle -= 5.0;
            break;
        case 25:
            exit(0);
        default:
            cout << "Invalid operation: " << char(key) <<endl;
    }
    glutPostRedisplay();
}

void reshape(int width, int height) {
    // prevent division by zero
    if (height == 0)
        height = 1;

    // set the viewport to cover the new window
    glViewport(0, 0, width, height);

    // set the aspect-ratio of the clipping area to match the viewport
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (width >= height) {
        gluOrtho2D(-1.0 * width / height, 1.0 * width / height, -1.0, 1.0);
    } else {
        gluOrtho2D(-1.0, 1.0, -1.0 * width / height, 1.0 * width / height);
    }
    glMatrixMode(GL_MODELVIEW);
}

void init() {
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glColor3f(1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-1, 1, -1, 1);
}

int main(int argc, char **argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);

    glutInitWindowSize(500, 500);
    glutCreateWindow("2D-Geometric operations");

    init();
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);

    glutMainLoop();

    return 0;
}
