#include <GL/glut.h>
#include <iostream>

// NOTE: this program depicts 3D-Geometric operations

// initial parameters
float tx = 0.0, ty = 0.0, tz = 0.0; // translation
float angleX = 0.0, angleY = 0.0, angleZ = 0.0; // rotation
float scale = 1.0;

void init(){
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glEnable(GL_DEPTH_TEST);
}

void drawCube(){
    glBegin(GL_QUADS);

    // front face
    glColor3f(1, 0, 0);
    glVertex3f(-0.5, -0.5, 0.5);
    glVertex3f(0.5, -0.5, 0.5);
    glVertex3f(0.5, 0.5, 0.5);
    glVertex3f(-0.5, 0.5, 0.5);

    // back face
    glColor3f(0, 1, 0);
    glVertex3f(-0.5, -0.5, -0.5);
    glVertex3f(-0.5, 0.5, -0.5);
    glVertex3f(0.5, 0.5, -0.5);
    glVertex3f(0.5, -0.5, -0.5);

    // left face
    glColor3f(0, 0, 1);
    glVertex3f(-0.5, -0.5, -0.5);
    glVertex3f(-0.5, -0.5, 0.5);
    glVertex3f(-0.5, 0.5, 0.5);
    glVertex3f(-0.5, 0.5, -0.5);

    // right face
    glColor3f(1, 1, 1);
    glVertex3f(0.5, -0.5, -0.5);
    glVertex3f(0.5, 0.5, -0.5);
    glVertex3f(0.5, 0.5, 0.5);
    glVertex3f(0.5, -0.5, 0.5);

    // top face
    glColor3f(0, 1, 1);
    glVertex3f(-0.5, 0.5, -0.5);
    glVertex3f(-0.5, 0.5, 0.5);
    glVertex3f(0.5, 0.5, 0.5);
    glVertex3f(0.5, 0.5, -0.5);

    // bottom face
    glColor3f(1, 0, 1);
    glVertex3f(-0.5, -0.5, -0.5);
    glVertex3f(0.5, -0.5, -0.5);
    glVertex3f(0.5, -0.5, 0.5);
    glVertex3f(-0.5, -0.5, 0.5);

    glEnd();
}

void display(){
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    glTranslatef(tx, ty, tz);

    glRotatef(angleX, 1, 0, 0);
    glRotatef(angleY, 0, 1, 0);
    glRotatef(angleZ, 0, 0, 1);

    glScalef(scale, scale, scale);

    drawCube();
    glutSwapBuffers();
}

void keyboard(unsigned char key, int x, int y){
    switch (key) {
        case 'x':
            angleX += 5.0;
            break;
        case 'X':
            angleX -= 5.0;
            break;
        case 'y':
            angleY += 5.0;
            break;
        case 'Y':
            angleY -= 5.0;
            break;
        case 'z':
            angleZ += 5.0;
            break;
        case 'Z':
            angleZ -= 5.0;
            break;
        case 's':
            scale += 0.1;
            break;
        case 'S':
            scale -= 0.1;
            break;
        case 't':
            tx += 0.1;
            break;
        case 'T':
            tx -= 0.1;
            break;
        case 'u':
            ty += 0.1;
            break;
        case 'U':
            ty -= 0.1;
            break;
        case 'v':
            tz += 0.1;
            break;
        case 'V':
            tz -= 0.1;
            break;
        case 27:
            exit(0);
    }
    glutPostRedisplay();
}

int main(int argc, char **argv){
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB |GLUT_DEPTH);

    glutInitWindowSize(800, 600);
    glutCreateWindow("3D transformations");

    init();

    glutDisplayFunc(display);
    glutKeyboardFunc(keyboard);

    glutMainLoop();
    return 0;

}